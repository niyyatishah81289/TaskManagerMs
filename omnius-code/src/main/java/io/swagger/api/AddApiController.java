package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.TaskDetails;
import io.swagger.repository.TaskManagementRepository;

import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;

import java.util.Random;

import javax.validation.Valid;
import io.swagger.utils.MyUtlity;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-12-09T15:49:23.548Z")

@Controller
public class AddApiController implements AddApi {

	private Random r = new Random();
	
	@Autowired
	private TaskManagementRepository taskManagementRepo;

	@Override
	public ResponseEntity<String> addTask(@ApiParam(value = "Task to be added",required=true)  @Valid @RequestBody TaskDetails body) 
	{
		if (body.getTaskId() == null ) 
			return new ResponseEntity<>("Task Id cannot be blank", HttpStatus.BAD_REQUEST);
		
		if (! (body.getPriority() >=1 &&  body.getPriority() <=5) ) 
			return new ResponseEntity<>("Priority can be 1 - 5 where 5 is highest priority", HttpStatus.BAD_REQUEST);

		if( taskManagementRepo.findByTaskId(body.getTaskId()) != null)
			return new ResponseEntity<>("Task Id should be unique", HttpStatus.BAD_REQUEST);

		if(MyUtlity.validateStatus(body.getStatus()))
		{
			body.setCreatedAt(MyUtlity.getDateWithoutZone(new DateTime()));
			taskManagementRepo.insert(body);
			return ResponseEntity.ok("Task Added successfully");

		}	
		else
			return new ResponseEntity<>("Tasks status can be : created, in-progress, closed or cancelled!",HttpStatus.BAD_REQUEST);		

	}
	
	//scheduler to create random tasks
	
	//using cron : <second> <minute> <hour> <day-of-month> <month> <day-of-week> <year> <command>
	//@Scheduled(cron = "0 15 10 * * ?")  >> 10.15am every day
	
	@Scheduled(fixedDelay = 100000)
	//run after every 100000 milliseconds
	public void taskGenerator() 
	{
	    System.out.println("Generating random task - " + System.currentTimeMillis() / 1000);	    
	    TaskDetails t = getRandomTask();
	    taskManagementRepo.insert(t);
	    
	}

	private TaskDetails getRandomTask() 
	{
		TaskDetails t = new TaskDetails();
		
		String taskid = "Task-"+r.nextInt();
		t.setTaskId(taskid);
		t.setPriority(r.nextInt(6));  //default to low priority
		t.setDescription("Random task generated by scheduler : "+taskid);
		t.setStatus("Created");
		t.setCreatedAt(MyUtlity.getDateWithoutZone(new DateTime()));
		t.setDueDate(t.getCreatedAt().plusDays(5)); //set default due date to 5 days after created date
		return t;
	}


	

}
